#!/usr/bin/env ruby
#frozen_string_literal: true
#
# raspp - Assembly Preprocessor in Ruby
# Copyright (C) 2019 Jeffrey Sharp
#
# raspp is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 3 of the License,
# or (at your option) any later version.
#
# raspp is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See
# the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with raspp.  If not, see <http://www.gnu.org/licenses/>.

module Raspp

  # ---------------------------------------------------------------------------
  # Refinements

  refine Object do
    # Converts an object to its meaning in the given context.
    def to_term(ctx)
      raise Error, "invalid assembly term: #{inspect}"
    end
  end

  refine Proc do
    # Invokes the Proc and converts its result the corresponding meaning in the
    # given DSL context.  This allows a Proc to be used as an analog to a
    # function-like preprocessor macro.  Example:
    #   cpp:   #define FOO(x) x + 1
    #   raspp: FOO = ->x { x + 1 }
    def to_term(ctx)
      call.to_term(ctx)
    end
  end

  refine Module do
    # Defines unary operators that produce assembler expressions.
    def define_asm_unary_ops
      define_method(:+@) { UnaryOp.new(:+, self) }
      define_method(:-@) { UnaryOp.new(:-, self) }
      define_method(:! ) { UnaryOp.new(:!, self) }
      define_method(:~ ) { UnaryOp.new(:~, self) }
      nil
    end

    # Defines binary operators that produce assembler expressions.
    def define_asm_binary_ops
      # Returns true if +rhs+ can form a binary expression with the receiver.
      define_method(:binary_op_with?) do |rhs|
        case rhs
        when ::Numeric  then !is_a?(::Numeric)
        when ::Symbol   then true
        when Expression then true
        end
      end

      # Define operators
      %i[ * / % + - << >> & ^ | == != < <= > >= && || ]
      .each do |op|
        define_method(op) do |rhs|
          if binary_op_with?(rhs)
            BinaryOp.new(op, self, rhs)
          else
            super(rhs)
          end
        end
      end

      # Aliases to invoke && || operators, which Ruby cannot override.
      alias_method :and, :'&&'
      alias_method :or,  :'||'
      nil
    end
  end

  refine Symbol do
    # Converts an object to its meaning in the given context.
    def to_term(ctx)
      Raspp::Symbol.new(self, ctx)
    end

    define_asm_unary_ops
    define_asm_binary_ops
  end

  refine Integer do
    # Converts an object to its meaning in the given context.
    def to_term(ctx)
      Raspp::Integer.new(self, ctx)
    end

    define_asm_binary_ops
  end

  refine String do
    # Converts an object to its meaning in the given context.
    def to_term(ctx)
      Raspp::String.new(self, ctx)
    end
  end

# Activate refinements
end   #Raspp
using  Raspp
module Raspp

  # ---------------------------------------------------------------------------
  # Core Classes

  # Constants
  K      = ::Kernel
  INDENT = " " * 4

  # An even more basic object
  class CleanObject < BasicObject
    # public  methods: __send__, __eval__, __exec__, __id__
    # private methods: initialize, method_missing, singleton_method_added,
    #                  singleton_method_removed, singleton_method_undefined

    define_method :__send__, ::Object.instance_method(:public_send)
    define_method :__eval__,          instance_method(:instance_eval)
    define_method :__exec__,          instance_method(:instance_exec)

    undef_method :!, :!=, :==, :equal?, :instance_eval, :instance_exec

    freeze
  end

  # Base class for contexts in which DSL code exexutes
  class Context < CleanObject
    def print *msgs
      loc = source_location
      $stderr.puts *msgs.map { |msg| "#{loc}: #{msg}" }
    end

    def error *msgs
      print *msgs
      msg = case msgs.count
            when 0 then "unspecified error"
            when 1 then msgs[0]
            when 2 then "multiple errors"
            end
      K.raise Error, msg
    end

    protected

    def source_location
      locations = ($!)&.backtrace_locations || K.caller_locations
      locations
         .find { |loc| loc.path != __FILE__ }
        &.then { |loc| "#{loc.path}:#{loc.lineno}" }
    end
  end

  # A context in which instructions and data directives may occur
  # For this experiment:
  # - target architecture = ColdFire ISA_A
  # - target CPU          = MCF5307
  # - output format       = vasm 'mot' syntax
  class CodeContext < Context
    def initialize(out)
      @out = out
    end

    def byte *vals
      directive :'dc.b', vals, 'hi'
    end

    def word *vals
      directive :'dc.w', vals, 'hi'
    end

    def long *vals
      directive :'dc.l', vals, 'hi'
    end

    def directive name, args=nil, comment=nil
      name = K.String name
      args = K.Array  args
      mark = @out.length

      # Directive
      @out << INDENT << name

      # Arguments
      unless args.empty?
        skip = mark + 15 - @out.length # to col 16
        @out << " " * skip if skip > 0
        args.reduce(" ") { |sep, arg| @out << sep << arg.to_term(self).to_s; ", " }
      end

      # Write comment
      unless comment.nil?
        skip = mark + 47 - @out.length # to col 48
        @out << " " * skip if skip > 0
        @out << " ; " << K.String(comment)
      end

      @out << ?\n
    end
  end

  # The top-level context
  class TopLevel < CodeContext
  end

  # Terms

  # (operand) Immediate
  #             -> Symbol
  #             -> Integer
  #             -> UnaryOp
  #             -> BinaryOp
  # (operand) DataReg
  # (operand) AddrReg
  # (operand) AddrRegInd
  # (operand) AddrRegIndInc
  # (operand) AddrRegIndDec
  # (operand) AddrRegDisp
  # (operand) AddrRegIdx
  # (operand) Abs16
  # (operand) Abs32
  # (operand) PcRelDisp
  # (operand) PcRelIdx

  # An object with meaning in a DSL context.
  class Term
    # Returns the DSL context in which the term appears.
    attr :context

    # Returns a new Term in the given DSL context.
    def initialize(ctx)
      @context = ctx
    end

    # Returns self.  See Object#to_term.
    def to_term(ctx)
      self
    end

    # Promotes the term to an instruction operand.
    def to_operand
      raise Error, "invalid assembly operand: #{inspect}"
    end

    # All subclasses must override to_s
  end

  # An assembly expression.
  class Expression < Term
    define_asm_unary_ops
    define_asm_binary_ops

    # Converts the term to an instruction operand.
    def to_operand
      Immediate.new(self, context)
    end
  end

  # An assembly symbol.
  class Symbol < Expression
    attr :name

    # Returns a new Symbol with the given name in the given context.
    def initialize(name, ctx)
      super ctx
      @name = name.to_sym
    end

    # TODO: Lookups
    # TODO: local?

    # Returns the assembly-language representation of the term.
    def to_s
      name.to_s
    end
  end

  # An assembly integer literal.
  class Integer < Expression
    attr :value

    # Returns a new Integer with the given value in the given context.
    def initialize(value, ctx)
      super ctx
      @value = K.Integer(value)
    end

    # Returns the assembly-language representation of the term.
    def to_s
      "$#{value.to_s(16)}"
    end
  end

  # An assembly string literal.
  class String < Expression
    attr :value

    # Returns a new String with the given value in the given context.
    def initialize(value, ctx)
      super ctx
      @value = K.String(value)
    end

    # Returns the assembly-language representation of the term.
    def to_s
      value.each_byte.reduce(+'"') do |s, b|
        s << case b
        when 0x20..0x7E then b
        when 0x08 then '\b'
        when 0x09 then '\t'
        when 0x0A then '\n'
        when 0x0C then '\f'
        when 0x0D then '\r'
        when 0x22 then '\"'
        when 0x5C then '\\\\'
        else '\x%02X' % b
        end
      end << '"'
    end
  end

  # An assembler unary operator expression.
  class UnaryOp < Expression
    attr :op, :expr

    def initialize(op, expr)
      @op   = op.to_sym
      @expr = expr
    end

    def to_term(ctx)
      @context ||= ctx
      @expr = expr.to_term(context)
      self
    end

    def to_s
      "#{@op}#{@expr}"
    end
  end

  # An assembler binary operator expression.
  class BinaryOp < Expression
    attr :op, :lhs, :rhs

    def initialize(op, lhs, rhs)
      @op  = op.to_sym
      @lhs = lhs
      @rhs = rhs
    end

    def to_term(ctx)
      @context ||= ctx
      @lhs = lhs.to_term(context)
      @rhs = rhs.to_term(context)
      self
    end

    def to_s
      "(#{@lhs} #{@op} #{@rhs})"
    end
  end

  # ---------------------------------------------------------------------------
  # Target-Specific Classes

  # An instruction operand.
  class Operand < Term
    # Returns self.  See Term#to_operand.
    def to_operand
      self
    end
  end

  # An immediate-mode operand.
  class Immediate < Operand
    attr :value

    # Returns a new Immediate with the given value in the given context.
    def initialize(val, ctx)
      super ctx
      @value = val
    end

    def to_s
      "\##{value}"
    end
  end

  class Error < RuntimeError
  end
end

# Script main
if __FILE__ == $0
  output = String.new(capacity: 4096)
  until ARGV.empty?
    context = Raspp::TopLevel.new(output)
    begin
      context.__eval__(ARGF.file.read, ARGF.path)
      $stdout << output
    rescue Raspp::Error
      context.print e
      exit false
    end
    ARGF.skip
    output.clear
  end
end

